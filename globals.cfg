################################################################################
#
# Declare any of the below variables in your own [gcode_macro _jm_options] to
# to override the values here.
#
# DO NOT CHANGE ANYTHING IN THIS FILE!!!
#
# This file handles the initialization for all the macros, and difficult to
# diagnose errors will result from unexpected values or code changes.
#
################################################################################

[gcode_macro _jm_globals]
# Height in mm from the bottom of the gantry to the top of the print bed
variable_gantry_height: 10
# print_head_ejection_height: 20

################################################################################
description: Initializes our globals, including any _jm_options overrides.
gcode:
  # { action_respond_info("Init JaysMacros vars")}
  {% set options = printer["gcode_macro _jm_options"] %}
  {% set jm = printer["gcode_macro _jm_globals"] %}

# Force overrides to use the original types in _JM_GLOBALS.
  {% for k in options %}
    {% if k not in jm %}
      {action_raise_error("%s is not valid for _JM_OPTIONS." | format(k))}
    {% endif %}
    {% if jm[k] is string %}
      SET_GCODE_VARIABLE MACRO=_jm_globals VARIABLE={k
        } VALUE="'{options[k]|replace('\\','\\\\')|replace('\'','\\\'')
                             |replace('\"','\\\"')}'"
    {% elif jm[k] is float %}
      SET_GCODE_VARIABLE MACRO=_jm_globals VARIABLE={k
        } VALUE="{options[k]|float}"
    {% elif jm[k] is integer or jm[k] is boolean %}
      SET_GCODE_VARIABLE MACRO=_jm_globals VARIABLE={k} VALUE="{options[k]|int}"
    {% elif jm[k] is mapping %}
      {% if options[k] is not mapping %}
        {action_raise_error("%s requires a mapping type." | format(k))}
      {% endif %}
      SET_GCODE_VARIABLE MACRO=_jm_globals VARIABLE={k
        } VALUE="{options[k]|replace('\"','\\\"')}"
    {% elif jm[k] is sequence %}
      {% if options[k] is not sequence %}
        {action_raise_error("%s requires a sequence type." | format(k))}
      {% endif %}
      SET_GCODE_VARIABLE MACRO=_jm_globals VARIABLE={k
        } VALUE="{options[k]|replace('\"','\\\"')}"
    {% else %}
      {action_raise_error("%s is not a valid type for _JM_OPTIONS."|format(k))}
    {% endif %}
  {% endfor %}

  M400 ; Wait for moves to finish before playing a beep

[delayed_gcode INIT_GLOBALS_JM]
# This runs once at startup and initializes all macros.
initial_duration: 1
gcode:
  { action_respond_info("Init JaysMacros")}
  # Init globals
  _JM_GLOBALS
  # This is any end-user gcode that need to run after macro initialization (overwrite globals).
  _JM_OPTIONS

[gcode_macro jmvars]
description: Lists global variables used by jays-macros.
  Usage: JMVARS [SEARCH=<search_string>]
gcode:
  {% set SEARCH = params.SEARCH|default(params.S|default(""))|lower %}
  {% set jm = printer["gcode_macro _jm_globals"] %}
  {% set output = [] %}
  {% for k in jm %}
    {% if SEARCH in k %}
      {% set dummy = output.append(k ~ ": " ~ jm[k]) %}
    {% endif %}
  {% endfor %}
  { action_respond_info(output|sort|join('\n')) }

[gcode_macro check_macro_docs]
description: Lists macros lacking proper documentation.
  Usage: CHECK_MACRO_DOCS [USAGE=<0|1>] [HIDDEN=<1|0>] [RENAMED=<1|0>]
gcode:
  {% set USAGE = params.USAGE|default(0)|int %}
  {% set HIDDEN = params.HIDDEN|default(0)|int %}
  {% set RENAMED = params.RENAMED|default(0)|int %}
  {% set output = [] %}
  {%set config = printer.configfile.config %}
  {% for k in config|sort %}
    {% if k.startswith("gcode_macro") %}
      {% set name = k.split()[1] %}
      {% set desc = config[k].description|default("") %}
      {% set is_renamed = config[k].rename_existing|default("") %}
      {% if (not desc or (USAGE and not "Usage: "~name.upper() in desc)) and
             (HIDDEN or not name.startswith('_')) and (RENAMED or is_renamed) %}
        {% set dummy = output.append("%s&nbsp;%s: missing %s."
           | format("*" if is_renamed else "&nbsp;", name,
                    "description" if not desc else "usage")) %}
      {% endif %}
    {% endif %}
  {% endfor %}
  {action_respond_info(output|join("\n"))}

# The below macro is a lightly edited version of the one found here:
# https://klipper.discourse.group/t/example-search-printer-objects/164
[gcode_macro listvars]
description: Lists per-macro variables with a name containing SEARCH. This is
  useful for debugging macros by allowing you to probe printer state. Be very
  careful, however, as an overly broad SEARCH parameter can take a long time
  to process and potentially hang or crash klipper.
  Usage: LISTVARS SEARCH=<search_string>
gcode:

  {% if 'SEARCH' not in params and 'S' not in params %}
    { action_raise_error("Must provide a SEARCH parameter.") }
  {% endif %}
  {% set SEARCH = params.SEARCH|default(params.S)|lower %}
  {% set ns = namespace() %}
  {% set output = [] %}
  {% for item in printer %}
    {% if ' ' in item %}
      {% set ns.path = ['printer', "['%s']" % (item), ''] %}
    {% else %}
      {% set ns.path = ['printer.', item, ''] %}
    {% endif %}

    {% if SEARCH in ns.path|lower %}
      {% set dummy = output.append(ns.path|join) %}
    {% endif %}

    {% if printer[item].items() %}
      {% for childkey, child in printer[item].items() recursive %}
          {% set ns.path = ns.path[:loop.depth|int + 1] %}
          {% if ' ' in childkey %}
            {% set null = ns.path.append("['%s']" % (childkey)) %}
          {% else %}
            {% set null = ns.path.append(".%s" % (childkey)) %}
          {% endif %}

          {% if child is mapping  %}
            {loop(child.items())}
          {% else %}
            {% if SEARCH in ns.path|lower %}
              {% set dummy = output.append("%s : %s" % (ns.path|join, child)) %}
            {% endif %}
          {% endif %}
        {% endfor %}
    {% endif %}
  {% endfor %}
  { action_respond_info(output|join("\n")) }
